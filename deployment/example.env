#
# DATABASE_URL and CELERY_BROKER_URL are generated in docker-compose.yml
#
# DATABASE_URL=flexiblededup://postgres/${POSTGRES_DB:-monitoring}?connect_timeout=10&application_name=alerta
# CELERY_BROKER_URL=redis://redis:6379/0

#
# Postgres configuration
#
POSTGRES_USER=alerta
POSTGRES_PASSWORD=postgres_password
POSTGRES_DB=monitoring

# Ensure that the SECRET_KEY that is used to encode tokens and API keys is a unique,
# randomly generated sequence of ASCII characters.
# The following command generates a suitable 32-character random string on Linux:
#
# $ LC_CTYPE=C tr -dc A-Za-z0-9_\!\@\#\$\%\^\&\*\(\)-+= < /dev/urandom | head -c 32 && echo
#
# or Mac OSX:
#
# $ date | md5 | base64
SECRET_KEY=SecretKeyZWU2YTU0Zjg2MDkyY2RmYmRlNDM4MjYzNWQ
ADMIN_USERS=alertaio-admin@example.com
ADMIN_PASSWORD=admin_password
API_KEY=The_Api_Key

ALERTERS=email
# Replace email server with real smtp server.
# A testing SMTP Server may be installed using:
#
# $ docker run --rm -d -p 3000:80 -p 2525:25 rnwood/smtp4dev --hostname=alerta_smtpserver --tlsmode=StartTls
#
# Apart from the smtp server, it provides a Web (in this case in port 3000 due to port redirection) where
# received emails can be checked.
#
EMAIL_CONFIG={"server":{"host":"localhost","port":2525,"tls_mode": "starttls"},"sender":"test@example.com","local_hostname":"alerta.example.com","action_delay":10,"tasks_definition":{"new": {"queue": "email", "priority": 5},"recovery": {"queue": "email_recovery", "priority": 6}}}
ALERTERS_CELERY_QUEUES=email,email_recovery
